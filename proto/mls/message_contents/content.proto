// Message content encoding structures
// Copied from V2 code so that we can eventually retire all V2 message content
syntax = "proto3";

package xmtp.mls.message_contents;

option go_package = "github.com/xmtp/proto/v3/go/mls/message_contents";
option java_package = "org.xmtp.proto.mls.message.contents";

// ContentTypeId is used to identify the type of content stored in a Message.
message ContentTypeId {
  string authority_id = 1;  // authority governing this content type
  string type_id = 2;       // type identifier
  uint32 version_major = 3; // major version of the type
  uint32 version_minor = 4; // minor version of the type
}

// Recognized compression algorithms
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
enum Compression {
  COMPRESSION_DEFLATE = 0;
  COMPRESSION_GZIP = 1;
}
// protolint:enable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH

// EncodedContent bundles the content with metadata identifying its type
// and parameters required for correct decoding and presentation of the content.
message EncodedContent {
  // content type identifier used to match the payload with
  // the correct decoding machinery
  ContentTypeId type = 1;
  // optional encoding parameters required to correctly decode the content
  map<string, string> parameters = 2;
  // optional fallback description of the content that can be used in case
  // the client cannot decode or render the content
  optional string fallback = 3;
  // optional compression; the value indicates algorithm used to
  // compress the encoded content bytes
  optional Compression compression = 5;
  // encoded content itself
  bytes content = 4;
}

// A PlaintextEnvelope is the outermost payload that gets encrypted by MLS
message PlaintextEnvelope {
  // Version 1 of the encrypted envelope
  message V1 {
    oneof content {
      // Expected to be EncodedContent
      bytes content = 1;
      // Initiator sends the request to receive history
      MessageHistoryRequest message_history_request = 5;
      // Other credentialed party sends response
      MessageHistoryResponse message_history_response = 6;
    }
    // A unique value that can be used to ensure that the same content can
    // produce different hashes. May be the sender timestamp.
    string idempotency_key = 2;
  }

  oneof content { V1 v1 = 1; }
}

// The initiator or new installation id that is requesting a history will send a
// request
message MessageHistoryRequest { string request_id = 1; }

// Pre-existing installation id that is capable of supplying a history will send
// this response
message MessageHistoryResponse {
  string request_id = 1;
  string backup_url = 2;
  bytes backup_file_hash = 3;
  int64 expiration_time_ns = 4;
}
