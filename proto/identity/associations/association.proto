// Payloads to be signed for identity associations
syntax = "proto3";

package xmtp.identity.associations;

import "identity/associations/signature.proto";

option go_package = "github.com/xmtp/proto/v3/go/identity/associations";
option java_package = "org.xmtp.proto.identity.associations";

// The first entry of any XID log. The XID must be deterministically derivable
// from the address and nonce.
// The recovery address defaults to the initial associated_address unless
// there is a subsequent ChangeRecoveryAddress in the log.
message CreateXid {
  string xid = 1;
  uint32 nonce = 2;
  Signature initial_address_signature = 3;  // Must be an addressable member
}

// Adds a new member for an XID - either an addressable member such as a
// wallet, or an installation acting on behalf of an address.
// A key-pair that has been associated with one role MUST not be permitted to be
// associated with a different role.
message AddAssociation {
  // The role of the new member in the association. Must not be UNSPECIFIED.
  enum AssociatedRole {
    ASSOCIATED_ROLE_UNSPECIFIED = 0;
    ASSOCIATED_ROLE_INSTALLATION = 1;
    ASSOCIATED_ROLE_ADDRESS = 2;
  }

  string xid = 1;
  uint64 client_timestamp_ns = 2;
  AssociatedRole new_member_role = 3;
  Signature existing_member_signature = 4;
  Signature new_member_signature = 5;
}

// Revokes a member from an XID. The recovery address must sign the revocation.
message RevokeAssociation {
  string xid = 1;
  uint64 client_timestamp_ns = 2;
  oneof revoked_member {
    bytes revoked_installation_public_key = 3;
    string revoked_address = 4;
  }
  Signature recovery_address_signature = 4;
}

// Changes the recovery address for an XID. The recovery address is not required
// to be a member of the XID. In addition to being able to add members, the
// recovery address can also revoke members.
message ChangeRecoveryAddress {
  string xid = 1;
  uint64 client_timestamp_ns = 2;
  string new_recovery_address = 3;
  Signature existing_recovery_address_signature = 4;
}

// A single identity operation
message IdentityAction {
  oneof kind {
    CreateXid create_xid = 1;
    AddAssociation add = 2;
    RevokeAssociation revoke = 3;
    ChangeRecoveryAddress change_recovery_address = 4;
  }
}

// One or more identity actions that were signed together.
// Example: [CreateXid, AddAssociation, ChangeRecoveryAddress]
// 1. The batched signature text is created by concatenating the signature text
//    of each association together with a separator, '\n\n\n'.
// 2. The user signs this concatenated result.
// 3. The resulting signature is added to each association proto where relevant.
//    The same signature may be used for multiple associations in the array.
message IdentityUpdate {
  repeated IdentityAction actions = 1;
}

// A single entry in the XID log on the server.
message IdentityUpdateLog {
  uint64 sequence_number = 1;
  uint64 server_timestamp_ns = 2;
  IdentityUpdate update = 3;
}
